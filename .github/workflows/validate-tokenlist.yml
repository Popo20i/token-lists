name: Validate Token List JSON

on:
  pull_request:
    paths:
      - 'src/**/*.tokenlist.json'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate JSON Syntax
        run: |
          echo "🔍 Vérification de la syntaxe JSON..."
          python3 -m json.tool src/cryptonia20.tokenlist.json || exit 1
          echo "✅ Syntaxe JSON valide"

      - name: Validate Required Fields
        run: |
          echo "🔍 Vérification des champs obligatoires..."
          python3 <<'EOF'
          import json, re, sys

          REQUIRED_ROOT = ["name", "timestamp", "version", "tokens"]
          REQUIRED_TOKEN = ["chainId", "address", "name", "symbol", "decimals"]

          try:
              with open("src/cryptonia20.tokenlist.json") as f:
                  data = json.load(f)

              # Vérification des champs racines
              for field in REQUIRED_ROOT:
                  if field not in data:
                      raise ValueError(f"Champ manquant: '{field}'")

              # Vérification des tokens
              if not isinstance(data["tokens"], list) or not data["tokens"]:
                  raise ValueError("'tokens' doit être une liste non vide")

              for i, token in enumerate(data["tokens"]):
                  for field in REQUIRED_TOKEN:
                      if field not in token:
                          raise ValueError(f"Token #{i} manque le champ: '{field}'")

                  # Validation de l'adresse Ethereum
                  if not re.match(r'^0x[a-fA-F0-9]{40}$', token["address"]):
                      raise ValueError(f"Adresse Ethereum invalide: {token['address']}")

              print("✅ Tous les champs requis sont valides")
          except Exception as e:
              print(f"❌ Erreur: {str(e)}")
              sys.exit(1)
          EOF